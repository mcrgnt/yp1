//go:build ignore

package main

import (
	"log"
	"os"
	"reflect"
	"text/template"

	"github.com/mcrgnt/yp1/internal/metrics"
)

var (
	tmpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package metrics

import (
	"fmt"

	"github.com/mcrgnt/yp1/internal/store/models"
)

const (
	errMetricSetFaild = "metric set failed: %w"
)

func pollMetrics(params *PollMetricsParams) error {
{{range .}}	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "{{.Name}}",
			Value: {{.Value}},
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
{{end}}
	return nil
}
`))
)

type data struct {
	Name  string
	Value string
}

func main() {
	f, err := os.Create("pollMetrics.go")
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := f.Close(); err != nil {
			log.Fatal(err)
		}
	}()

	datas := []data{}
	val := reflect.ValueOf(metrics.MemStats).Elem()
	for _, name := range metrics.PollMetricsFromMemStatsList {
		switch val.FieldByName(name).Interface().(type) {
		case uint32, uint64:
			datas = append(datas, data{
				Name:  name,
				Value: "float64(MemStats." + name + ")",
			})
		default:
			datas = append(datas, data{
				Name:  name,
				Value: "MemStats." + name,
			})
		}
	}
	if err = tmpl.Execute(f, datas); err != nil {
		log.Fatal(err)
	}
}
