package storage

import (
	"fmt"
	"reflect"
	"strconv"
	"testing"

	"github.com/mcrgnt/yp1/internal/common"
	"github.com/mcrgnt/yp1/internal/storage/internal/metric"
	"github.com/stretchr/testify/assert"
)

func Test_Equal_NewMemStorage(t *testing.T) {
	tests := []struct {
		want *MemStorage
		name string
	}{
		{
			name: "test0",
			want: &MemStorage{
				Metrics: map[string]metric.Metric{},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			actual := NewMemStorage()
			assert.Equal(t, reflect.TypeOf(tt.want), reflect.TypeOf(actual))
			assert.Equal(t, tt.want.Metrics, actual.Metrics)
		})
	}
}
func Test_NotEqual_NewMemStorage(t *testing.T) {
	tests := []struct {
		want *MemStorage
		name string
	}{
		{
			name: "test0",
			want: &MemStorage{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			actual := NewMemStorage()
			assert.NotEqual(t, nil, actual)
			assert.NotEqual(t, tt.want.Metrics, actual.Metrics)
		})
	}
}

func TestMemStorage_MetricSet(t *testing.T) {
	tests := []struct {
		expected string
		params   *StorageParams
		name     string
	}{
		{name: "test_a", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(-1)}, expected: "-1"},
		{name: "test_a", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(-1.0)}, expected: "-1.0"},
		{name: "test_a", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(0)}, expected: "0"},
		{name: "test_a", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(0.0)}, expected: "0.0"},
		{name: "test_a", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(1)}, expected: "1"},
		{name: "test_a", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(1.0)}, expected: "1.0"},

		// {name: "test_3", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: "-1"}, expected: "-1"},
		// {name: "test_4", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: "0"}, expected: "0"},
		// {name: "test_5", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: "1"}, expected: "1"},
		// {name: "test_6", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(0.00000)}, expected: "0.00000"},
		// {name: "test_7", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(-0.032)}, expected: "-0.032"},
		// {name: "test_8", params: &StorageParams{Type: common.MetricTypeGauge, Name: "test", Value: float64(0.032)}, expected: "0.032"},
	}
	for i, tt := range tests {
		t.Run(tt.name+"_"+strconv.Itoa(i), func(t *testing.T) {
			_storage := NewMemStorage()
			actualErr := _storage.MetricSet(tt.params)
			assert.Equal(t, nil, actualErr)
			actualErr = _storage.GetMetricString(tt.params)
			assert.Equal(t, nil, actualErr)
			assert.Equal(t, tt.expected, tt.params.String)
			fmt.Println("exp:", tt.expected, "act:", tt.params.String)
		})
	}
}
