//go:build ignore

package main

import (
	"os"
	"reflect"
	"text/template"

	"github.com/mcrgnt/yp1/internal/metrics"
)

var (
	tmpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package metrics

import (
	"github.com/mcrgnt/yp1/internal/storage"
)

func genPollMetrics(params *PollMetricsParams) {
	{{range .}}params.Storage.Update(&storage.StorageParams{
		Type: "{{.Type}}",
		Name: "{{.Name}}",
		Value: {{.Value}},
	})
	{{end}}
}
`))
)

type data struct {
	Type  string
	Name  string
	Value string
}

func main() {
	f, err := os.Create("pollMetrics.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	datas := []data{}
	val := reflect.ValueOf(metrics.MemStats).Elem()
	for _, name := range metrics.PollMetricsFromMemStatsList {
		switch val.FieldByName(name).Interface().(type) {
		case uint32, uint64:
			datas = append(datas, data{
				Type:  "gauge",
				Name:  name,
				Value: "float64(MemStats." + name + ")",
			})
		default:
			datas = append(datas, data{
				Type:  "gauge",
				Name:  name,
				Value: "MemStats." + name,
			})

		}
	}

	tmpl.Execute(f, datas)

	// for _, name := range metrics.PollMetricsFromMemStatsList {
	// 	f.WriteString(name + "\n")
	// }
	// val := reflect.ValueOf(memStats).Elem()
	// for _, name := range PollMetricsFromMemStatsList {
	// 	updateParams := &storage.StorageParams{
	// 		Type: "gauge",
	// 		Name: name,
	// 	}
	// 	switch val.FieldByName(name).Interface().(type) {
	// 	case uint32, uint64:
	// 		updateParams.Value = cval.FieldByName(name).Uint())
	// 	default:
	// 		updateParams.Value = val.FieldByName(name).Float()
	// 	}
	// 	params.Storage.Update(updateParams)
	// }
	// {
	// 	updateParams := &storage.StorageParams{
	// 		Type:  "gauge",
	// 		Name:  "RandomValue",
	// 		Value: rand.Float64(),
	// 	}
	// 	params.Storage.Update(updateParams)
	// }
	// {
	// 	updateParams := &storage.StorageParams{
	// 		Type:  "counter",
	// 		Name:  "PollCount",
	// 		Value: int64(1),
	// 	}
	// 	params.Storage.Update(updateParams)
	// }
}
