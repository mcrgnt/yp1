// Code generated by go generate; DO NOT EDIT.
package metrics

import (
	"fmt"

	"github.com/mcrgnt/yp1/internal/store/models"
)

const (
	errMetricSetFaild = "metric set failed: %w"
)

func pollMetrics(params *PollMetricsParams) error {
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "Alloc",
			Value: float64(MemStats.Alloc),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "BuckHashSys",
			Value: float64(MemStats.BuckHashSys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "Frees",
			Value: float64(MemStats.Frees),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "GCCPUFraction",
			Value: MemStats.GCCPUFraction,
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "GCSys",
			Value: float64(MemStats.GCSys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "HeapAlloc",
			Value: float64(MemStats.HeapAlloc),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "HeapIdle",
			Value: float64(MemStats.HeapIdle),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "HeapInuse",
			Value: float64(MemStats.HeapInuse),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "HeapObjects",
			Value: float64(MemStats.HeapObjects),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "HeapReleased",
			Value: float64(MemStats.HeapReleased),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "HeapSys",
			Value: float64(MemStats.HeapSys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "LastGC",
			Value: float64(MemStats.LastGC),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "Lookups",
			Value: float64(MemStats.Lookups),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "MCacheInuse",
			Value: float64(MemStats.MCacheInuse),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "MCacheSys",
			Value: float64(MemStats.MCacheSys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "MSpanInuse",
			Value: float64(MemStats.MSpanInuse),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "MSpanSys",
			Value: float64(MemStats.MSpanSys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "Mallocs",
			Value: float64(MemStats.Mallocs),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "NextGC",
			Value: float64(MemStats.NextGC),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "NumForcedGC",
			Value: float64(MemStats.NumForcedGC),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "NumGC",
			Value: float64(MemStats.NumGC),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "OtherSys",
			Value: float64(MemStats.OtherSys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "PauseTotalNs",
			Value: float64(MemStats.PauseTotalNs),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "StackInuse",
			Value: float64(MemStats.StackInuse),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "StackSys",
			Value: float64(MemStats.StackSys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "Sys",
			Value: float64(MemStats.Sys),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}
	{
		if err := params.Storage.MetricSet(&models.StorageParams{
			Type: TypeMetricGauge,
			Name: "TotalAlloc",
			Value: float64(MemStats.TotalAlloc),
		}); err != nil {
			return fmt.Errorf(errMetricSetFaild,  err)
		}
	}

	return nil
}
